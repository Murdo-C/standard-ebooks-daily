name: Daily Standard Ebooks JSON
on:
  schedule:
    - cron: '5 0 * * *'
  workflow_dispatch:
jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet jq

      - name: Fetch OPDS & build books.json
        env:
          OPDS_KEY: ${{ secrets.OPDS_KEY }}
        run: |
          set -eux

          # define all of your genres
          GENRES=(
            Adventure Autobiography Biography "Childrenâ€™s"
            Comedy Drama Fantasy Fiction Horror Memoir
            Mystery Nonfiction Philosophy Poetry Satire
            "Science Fiction" Shorts Spirituality Travel
          )

          # 1) download full feed
          curl -u "$OPDS_KEY:" -sS https://standardebooks.org/feeds/opds/all > feed.xml

          # start JSON array
          echo "[" > books.json
          first=true

          for GENRE in "${GENRES[@]}"; do
            # 2) filter entries for this genre
            #    uses xmlstarlet to count how many entries match
            XPATH="//entry[.//*[local-name()='category' and @scheme='https://standardebooks.org/vocab/subjects' and @term=\"$GENRE\"]]"
            COUNT=$(xmlstarlet sel -N x=http://www.w3.org/2005/Atom \
                                 -t -v "count(${XPATH})" \
                                 feed.xml)

            # skip if no entries for this genre
            if [ "$COUNT" -eq 0 ]; then
              continue
            fi

            # 3) pick one seeded by date
            IDX=$(( (10#$(date -u +%Y%m%d) % COUNT) + 1 ))

            # 4) extract that single <entry>
            xmlstarlet sel -N x=http://www.w3.org/2005/Atom \
              -t -c "(${XPATH})[$IDX]" feed.xml > entry.xml

            # 5) pull out fields
            TITLE=$(xmlstarlet sel -t -v "string(//*[local-name()='title'])" entry.xml | jq -R -s 'rtrimstr("\n")')
            AUTHOR=$(xmlstarlet sel -t -v "string(//*[local-name()='author']/*[local-name()='name'])" entry.xml | jq -R -s 'rtrimstr("\n")')
            SUMMARY=$(xmlstarlet sel -t -v "string(//*[local-name()='summary'])" entry.xml | jq -R -s 'rtrimstr("\n")')
            COVER=$(xmlstarlet sel -t -v "string(//*[local-name()='link' and @rel='http://opds-spec.org/image']/@href)" entry.xml)
            ENTRY_URL=$(xmlstarlet sel -t -v "string(//*[local-name()='id'])" entry.xml)

            # 6) build a per-genre JSON object
            OBJ=$(jq -n \
              --arg genre    "$GENRE" \
              --arg date     "$(date -u +%F)" \
              --argjson title   "$TITLE" \
              --argjson author  "$AUTHOR" \
              --argjson summary "$SUMMARY" \
              --arg coverUrl    "$COVER" \
              --arg entryUrl    "$ENTRY_URL" \
              '{
                 genre:   $genre,
                 date:    $date,
                 title:   $title,
                 author:  $author,
                 summary: $summary,
                 coverUrl: $coverUrl,
                 entryUrl: $entryUrl
               }')

            # 7) append comma as needed, then object
            if $first; then
              first=false
            else
              echo "," >> books.json
            fi
            echo "$OBJ" >> books.json
          done

          # close array
          echo "]" >> books.json

      - name: Commit & push books.json
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add books.json
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Daily books JSON $(date -u +%F)"
            git push
          fi
